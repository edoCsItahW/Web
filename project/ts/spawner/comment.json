[
    "\n    计算除第一个参数以外的参数在第一个参数里出现的次数\n\n    :param aimstr: 目标变量\n    :type aimstr: Union[str, list]\n    :param args: 除第一个参数以外的参数\n    :type args: Union[str, list]\n    :return: 对应参数在目标变量中出现的个数.\n    :retype: dict\n    ",
    "\n    由棋盘路径计数问题引出\n    问:从一个对角线的起点到另一个对角线的终点,只能向右或向下移动,\n    且不能再次移动到已经路过的格子,有多少种不同的路径可以到达终点.\n    这里通过递归创建类来实现\n\n    # 这里将上一个格子创建的类称为当前格子的类的父类,同理下一个格子的类称为子类\n    该类作为一个数据记录类,做着接受父类传递的历史路径,并为下一个格子创建一个类,\n    将当前格子的坐标添加到历史路径列表之后传给子类的工作.\n    该类不能单独运行,需要借助外部函数returnAllpath来启动,递归和输出.\n\n    Attributes:\n        :ivar size: 棋盘的尺寸限定为正方形.\n        :ivar pos: 起始位置.(默认为(1, 1)并且父类的位置就是子类的起始位置)\n        :ivar x: 起始位置的x坐标\n        :ivar y: 起始位置的y坐标\n        :ivar all: 将传递给子类的历史位置\n        :ivar lastlist: 不包含当前位置的路径历史\n\n    Methods::\n        :meth:`logtimes`: 测试工具,启用将导入heartrate模块,这个模块会打开一个浏览器,浏览器会显示栈和每步代码执行的次数.\n\n        :meth:`nextpos`: 计算并排除超出范围和在历史路径中的下一步的可能位置,也作为到达重点和陷入死路的判断条件.\n\n        :meth:`logRes_CreateLast`: 该方法将会对nextpos的列表做判断,为空则记录,不为空则为每一个路径创建一个实例.\n\n    ",
    "\n    用于获取方形网格中从坐标(1, 1)移动至其对角的位置的所有路径.\n\n    :param size: 网格的边长\n    :type size: int\n    :param outtype: 输出结果,1将输出正确结果,-1输出死路结果,其它输出全部.(默认为0)\n    :return: 包含所有路径的列表.\n    :retype: list\n    ",
    "\n    分割列表.\n\n    :param aimlist: 被作用的列表.\n    :type aimlist: list\n    :param part: 要分成多少分.\n    :type part: int\n    :return: 分割后的多个列表.\n    :retype: list\n    ",
    "\n    一个等待动画\n\n    Attributes:\n        length: 等待条长度.\n        stop: 停止信号.(非用户参数)\n        interval: 动画帧数.\n        queue: 多线程队列.(非用户参数)\n    Methods:\n        print_last: 打印下一个.\n        run: 循环核心.\n        begin_wait: 开始等待.\n        end_wait: 结束等待.\n    ",
    "\n    对一段文本进行编码及转码,使进制数转换为文字.\n\n    :param text: 需要进行转换的文本.\n    :type text: str\n    :return: 转换后的文本.\n    :retype: str\n    ",
    "\n    制造类似\n    \"[(0, 1), (1, 0), (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3), (4, 5), (5, 4)]\"\n    的列表.\n\n    :param beginnum: 起始数字,这决定了从哪个数字开始.\n    :type beginnum: int\n    :param endnum: 结束数字,这决定了列表中元素的个数.\n    :type endnum: int\n    :param x: 每个元组第1位数的偏移量,即当x=1时,所有元组的第一位加1.\n    :type x: int\n    :param y: 每个元组第2位数的偏移量,即当y=1时,所有元组的第二位加1.\n    :return: 包含对应元组的列表.\n    :retype: list\n    ",
    "\n    使用数字,元组或其它容器类的长度快速生成列表.\n\n    :param index:\n        当index为整数时,将生成以0开头到index结尾的,间隔为1的列表.\n        当index为元组时,将生成以元组第一位数至元组第二为数结尾的,间隔为1的列表.\n        当index为其它容器时,将生成以0开头到由容器内元素个数决定的该容器的长度整数结尾的,间隔为1的列表.\n    :type index: Container\n    :return: 返回什么.\n    :retype: 返回值的类型\n    ",
    "\n    将数字平均分组.\n\n    :param start: 初始数值\n    :type start: int\n    :param end: 结束数值\n    :type end: int\n    :param part: 份数\n    :type part: int\n    :return: 分组后的列表\n    :rtype: list\n    ",
    "\n    函数zip的逆函数,它将[(1, 2, ...), (3, 4, ...)]类型列表解包为[[1, 3, ...], [2, 4, ...]]\n\n    :param itemlist: 目标列表.\n    :type itemlist: list\n    :return: 解包后的列表.\n    :retype: list\n    ",
    "\n    可擦除打印,当使用该函数进行输出时,再次使用该函数输出可以请求上次的输出.\n\n    :param text: 打印的目标.\n    :type text: ...\n    :return: 操作执行函数不做返回.\n    :retype: None\n    ",
    "\n        计数出数据每一列的最大长度\n        ",
    "\n        将dataMaxLen与对应column的每一个元素的长度进行对比,获取最大的长度\n        ",
    "\n        制作分割线\n        ",
    "\n    单分发器.\n\n    Attributes:\n        :ivar _func: 被装饰的函数.\n        :ivar _rulesDict: 规则字典.\n        :ivar _pos: 进行对比的参数位置.\n\n    Methods:\n        _checkRule: 验证规则.\n\n        register: 注册规则.\n\n        __call__: 执行函数.\n    ",
    "\n    广义单分发器.\n\n    Example::\n\n        对比函数传入的参数中的第一个参数的值::\n\n            >>> @GsingleDispatch\n            >>> def func(x: int, y: int):\n            >>>     return x + y\n            >>>\n            >>> # 对比函数传入的参数中的第一个参数的值\n            >>> @func.register(0, value=1)\n            >>> def _(x: int, y: int):\n            >>>     return x - y\n            >>>\n            >>> @func.register(0, value=2)\n            >>> def _(x: int, y: int):\n            >>>     return x * y\n            >>>\n            >>> func(1, 2)\n            1\n            >>> func(1, 3)\n            2\n            >>> func(2, 2)\n\n        对比函数传入的参数中的第一个参数的类型::\n\n            >>> # 对比函数传入的参数中的第一个参数的类型\n            >>> @GsingleDispatch\n            >>> def func(x: int, y: int):\n            >>>     return x + y\n            >>>\n            >>> @func.register(0, Type=int)\n            >>> def _(x: int, y: int):\n            >>>     return x - y\n            >>>\n            >>> @func.register(0, Type=str)\n            >>> def _(x: str, y: int):\n            >>>     return x + str(y)\n            >>>\n            >>> func(1, 2)\n            1\n            >>> func(\"1\", 2)\n            '12'\n            >>> func(1, 3)\n            -2\n            >>> func(\"1\", 3)\n\n    :param func: 被装饰的函数.\n    :return: _funcWarp实例.\n    ",
    "\n    广义单分发器.\n\n    Methods:\n        __init__: 初始化.\n\n        register: 注册规则.\n\n        __call__: 执行函数.\n    ",
    "\n    计算除第一个参数以外的参数在第一个参数里出现的次数\n\n    :param aimstr: 目标变量\n    :type aimstr: Union[str, list]\n    :param args: 除第一个参数以外的参数\n    :type args: Union[str, list]\n    :return: 对应参数在目标变量中出现的个数.\n    :retype: dict\n    ",
    "\n    由棋盘路径计数问题引出\n    问:从一个对角线的起点到另一个对角线的终点,只能向右或向下移动,\n    且不能再次移动到已经路过的格子,有多少种不同的路径可以到达终点.\n    这里通过递归创建类来实现\n\n    # 这里将上一个格子创建的类称为当前格子的类的父类,同理下一个格子的类称为子类\n    该类作为一个数据记录类,做着接受父类传递的历史路径,并为下一个格子创建一个类,\n    将当前格子的坐标添加到历史路径列表之后传给子类的工作.\n    该类不能单独运行,需要借助外部函数returnAllpath来启动,递归和输出.\n\n    Attributes:\n        :ivar size: 棋盘的尺寸限定为正方形.\n        :ivar pos: 起始位置.(默认为(1, 1)并且父类的位置就是子类的起始位置)\n        :ivar x: 起始位置的x坐标\n        :ivar y: 起始位置的y坐标\n        :ivar all: 将传递给子类的历史位置\n        :ivar lastlist: 不包含当前位置的路径历史\n\n    Methods::\n        :meth:`logtimes`: 测试工具,启用将导入heartrate模块,这个模块会打开一个浏览器,浏览器会显示栈和每步代码执行的次数.\n\n        :meth:`nextpos`: 计算并排除超出范围和在历史路径中的下一步的可能位置,也作为到达重点和陷入死路的判断条件.\n\n        :meth:`logRes_CreateLast`: 该方法将会对nextpos的列表做判断,为空则记录,不为空则为每一个路径创建一个实例.\n\n    ",
    "\n    用于获取方形网格中从坐标(1, 1)移动至其对角的位置的所有路径.\n\n    :param size: 网格的边长\n    :type size: int\n    :param outtype: 输出结果,1将输出正确结果,-1输出死路结果,其它输出全部.(默认为0)\n    :return: 包含所有路径的列表.\n    :retype: list\n    ",
    "\n    分割列表.\n\n    :param aimlist: 被作用的列表.\n    :type aimlist: list\n    :param part: 要分成多少分.\n    :type part: int\n    :return: 分割后的多个列表.\n    :retype: list\n    ",
    "\n    一个等待动画\n\n    Attributes:\n        length: 等待条长度.\n        stop: 停止信号.(非用户参数)\n        interval: 动画帧数.\n        queue: 多线程队列.(非用户参数)\n    Methods:\n        print_last: 打印下一个.\n        run: 循环核心.\n        begin_wait: 开始等待.\n        end_wait: 结束等待.\n    ",
    "\n    对一段文本进行编码及转码,使进制数转换为文字.\n\n    :param text: 需要进行转换的文本.\n    :type text: str\n    :return: 转换后的文本.\n    :retype: str\n    ",
    "\n    制造类似\n    \"[(0, 1), (1, 0), (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3), (4, 5), (5, 4)]\"\n    的列表.\n\n    :param beginnum: 起始数字,这决定了从哪个数字开始.\n    :type beginnum: int\n    :param endnum: 结束数字,这决定了列表中元素的个数.\n    :type endnum: int\n    :param x: 每个元组第1位数的偏移量,即当x=1时,所有元组的第一位加1.\n    :type x: int\n    :param y: 每个元组第2位数的偏移量,即当y=1时,所有元组的第二位加1.\n    :return: 包含对应元组的列表.\n    :retype: list\n    ",
    "\n    使用数字,元组或其它容器类的长度快速生成列表.\n\n    :param index:\n        当index为整数时,将生成以0开头到index结尾的,间隔为1的列表.\n        当index为元组时,将生成以元组第一位数至元组第二为数结尾的,间隔为1的列表.\n        当index为其它容器时,将生成以0开头到由容器内元素个数决定的该容器的长度整数结尾的,间隔为1的列表.\n    :type index: Container\n    :return: 返回什么.\n    :retype: 返回值的类型\n    ",
    "\n    将数字平均分组.\n\n    :param start: 初始数值\n    :type start: int\n    :param end: 结束数值\n    :type end: int\n    :param part: 份数\n    :type part: int\n    :return: 分组后的列表\n    :rtype: list\n    ",
    "\n    函数zip的逆函数,它将[(1, 2, ...), (3, 4, ...)]类型列表解包为[[1, 3, ...], [2, 4, ...]]\n\n    :param itemlist: 目标列表.\n    :type itemlist: list\n    :return: 解包后的列表.\n    :retype: list\n    ",
    "\n    可擦除打印,当使用该函数进行输出时,再次使用该函数输出可以请求上次的输出.\n\n    :param text: 打印的目标.\n    :type text: ...\n    :return: 操作执行函数不做返回.\n    :retype: None\n    ",
    "\n        计数出数据每一列的最大长度\n        ",
    "\n        将dataMaxLen与对应column的每一个元素的长度进行对比,获取最大的长度\n        ",
    "\n        制作分割线\n        ",
    "\n    单分发器.\n\n    Attributes:\n        :ivar _func: 被装饰的函数.\n        :ivar _rulesDict: 规则字典.\n        :ivar _pos: 进行对比的参数位置.\n\n    Methods:\n        _checkRule: 验证规则.\n\n        register: 注册规则.\n\n        __call__: 执行函数.\n    ",
    "\n    广义单分发器.\n\n    Example::\n\n        对比函数传入的参数中的第一个参数的值::\n\n            >>> @GsingleDispatch\n            >>> def func(x: int, y: int):\n            >>>     return x + y\n            >>>\n            >>> # 对比函数传入的参数中的第一个参数的值\n            >>> @func.register(0, value=1)\n            >>> def _(x: int, y: int):\n            >>>     return x - y\n            >>>\n            >>> @func.register(0, value=2)\n            >>> def _(x: int, y: int):\n            >>>     return x * y\n            >>>\n            >>> func(1, 2)\n            1\n            >>> func(1, 3)\n            2\n            >>> func(2, 2)\n\n        对比函数传入的参数中的第一个参数的类型::\n\n            >>> # 对比函数传入的参数中的第一个参数的类型\n            >>> @GsingleDispatch\n            >>> def func(x: int, y: int):\n            >>>     return x + y\n            >>>\n            >>> @func.register(0, Type=int)\n            >>> def _(x: int, y: int):\n            >>>     return x - y\n            >>>\n            >>> @func.register(0, Type=str)\n            >>> def _(x: str, y: int):\n            >>>     return x + str(y)\n            >>>\n            >>> func(1, 2)\n            1\n            >>> func(\"1\", 2)\n            '12'\n            >>> func(1, 3)\n            -2\n            >>> func(\"1\", 3)\n\n    :param func: 被装饰的函数.\n    :return: _funcWarp实例.\n    ",
    "\n    广义单分发器.\n\n    Methods:\n        __init__: 初始化.\n\n        register: 注册规则.\n\n        __call__: 执行函数.\n    ",
    "\n    多画布创建器\n\n    Attributes:\n        dim: 创建画布的维度,之所以说维度,是因为该方法创建画布的位置和矩阵\n            是一样的,例如(1, 2)会创建一个一左一右的画布,(4, 3)会创建4行画布行每一行都有3个画布,\n            但需要注意的是不同的维度的调用方法是不一样的,如下所示:\n            1.(1, 1): 只生成一个对象,该对象既不是list也不是array所以直接以`.plot...`调用即可.\n            2.(1, ...)或(..., 1): 但有一个维度为1维时,返回一个列表,这时你需要使用位置索引`[int]`来调用.\n            3.(..., ...): 除了以上维度中有1维的情况,其余情况均返回一个数组,此时你需要使用数组的索引方式,如`[row, column]`调用.\n        args: 自动绘制参数,这是个不定位置参数,如果不传入则返回画布对象,如果传入则直接绘制而不返回,\n            并且如果传入的数据对象多于维度的大小(即:dimension[0] * dimension[1] > len(args))则会引发IndexError,\n            反之少于则剩余画布留白.需要注意的是可接收参数如下:\n            1.list[int]: 一个数值列表,将以默认顺序绘制.(如: [1, 4, 9])\n            2.list[tuple[int, int]]: 一个元组列表,每个元组首位为x轴坐标,末位为y轴坐标.(如:[(0, 0), (1, 2)])\n            3.list[tuple[int, str]]: 一个元组列表,顺序默认,每个元组首位为数值,末位为需要显示在图中数值上方的标签.(如: [(1, \"tag\"), (4, \"二的平方\")])\n            4.list[tuple[int, tuple[int, str]]]: 等效于第5个.(如:[(0, (0, \"tag\")), (1, (4, \"二的平方\"))])\n            5.list[tuple[tuple[int, int], str]]: 一个元组列表,首位中的元组为坐标,末尾为标签.(如:[((0, 0), \"tag\"), ((1, 4), \"二的平方\")])\n    Methods:\n        方法名: 方法职能.\n    ",
    "\n    日志输出初始化方法.\n\n    :param logfilepath: 目标日志文件路径.\n    :type logfilepath: str\n    :param leve: 输出级别\n    :type leve: int\n    :return: 操作执行函数不做返回.\n    ",
    "\n    断点错误定向(PS:需调用logset方法初始化日志文件路径).\n\n    :param leve: 错误级别(级别从低到高)\n                 1.``debug``\n                 2.``info``\n                 3.``warning``\n                 4.``error``\n                 5.``critical``\n    :type leve: int\n    :param allowprint: 是否允许输出至控制台.(默认:True)\n    :type allowprint: bool\n    :param reserve: 是否保留前缀`Traceback (most recent call last):`.(默认:False)\n    :type reserve: bool\n    :param translate: 开启关键字翻译.(默认为True)\n    :type translate: bool\n    :param tranfin: 是否运行提供最后一句话的参考翻译.(默认为True)\n    :type tranfin: bool\n    :param mess: 额外的信息\n    :type mess: str\n    :return: 操作执行函数不做返回.\n    :retype: None\n    ",
    "\n    用来记录错误信息的装饰器.\n\n    :param leve: 错误级别(级别从低到高)\n                 1.``debug``\n                 2.``info``\n                 3.``warning``\n                 4.``error``\n                 5.``critical``\n    :type leve: int\n    :param allowprint: 是否允许输出至控制台.(默认:True)\n    :type allowprint: bool\n    :param reserve: 是否保留前缀`Traceback (most recent call last):`.(默认:False)\n    :type reserve: bool\n    :param translate: 开启关键字翻译.(默认为True)\n    :type translate: bool\n    :param tranfin: 是否开启详细错误信息翻译.(默认为False)PS.时间开销极大\n    :type tranfin: bool\n    :return: 返回经装饰的原函数.\n    :retype: Callable\n    ",
    "\n    用来拦截错误和警告,包括记录错误信息的装饰器.\n\n    :param allowLog: 是否运行记录错误到错误日志\n    :type allowLog: bool\n    :param leve: 错误级别(级别从低到高)\n                 1.``debug``\n                 2.``info``\n                 3.``warning``\n                 4.``error``\n                 5.``critical``\n    :type leve: int\n    :param allowprint: 是否允许输出至控制台.(默认:True)\n    :type allowprint: bool\n    :param reserve: 是否保留前缀`Traceback (most recent call last):`.(默认:False)\n    :type reserve: bool\n    :param translate: 开启关键字翻译.(默认为True)\n    :type translate: bool\n    :param tranfin: 是否开启详细错误信息翻译.(默认为False)PS.时间开销极大\n    :type tranfin: bool\n    :param ErrorType: 拦截的错误类型,元组\n    :type ErrorType: tuple[type[Exception]]\n    :param WarningType: 拦截的警告类型,元组\n    :type WarningType: tuple[type[Warning]]\n    :return: 返回经装饰的原函数.\n    :retype: Callable\n    ",
    "\n    随机获取请求头.\n\n    :param havehead: 是否带有\"User-Agent\"\n    :type havehead: bool\n    :return: 含有请求头的字典或信息字符串.\n    ",
    "\n    随机获取代理地址.\n\n    :param protocol: 协议名称.\n    :type protocol: str\n    :keyword strtype: 是否为字符类,否则为字典.\n    :type strtype: bool\n    :return: 包含代理地址的字典或数据.\n    ",
    "\n    一个数据类.\n\n    :ivar json(): 返回json数据.\n    :ivar text(): 返回文本格式数据.\n    :ivar content(): 返回二进制数据.\n    :ivar soup(): 返回BeautifulSoup类数据.\n    ",
    "\n    简化并封装了requests的请求功能.\n\n    :ivar url: 请求地址.\n    :ivar data: post请求的参数.\n    :ivar headers: 请求头.(默认随机.)\n    :ivar params: 带参url字典.\n    :ivar cookies: cookies.\n    :ivar timeout: 超时时长.\n    :ivar proxies: 代理地址.(默认随机.)\n    :ivar verify: 是否启用安全检查.\n    :ivar encoding: 编码模式.\n    :ivar Proxietest(): 对代理池中的所有代理地址进行可用检测.\n    :ivar getPostinfo(): 获取post请求数据.\n    :ivar getRuninfo(): 获取get请求数据.\n    :ivar sessioninfo(): 获取会话请求数据.\n    :ivar getsoup(): 快捷获取BeautifulSoup类数据.\n    :ivar getXpath(): 快速获取Xpath数据.\n    ",
    "\n        对代理池中的所有代理地址进行可用检测.\n\n        :param allowprint: 是否允许打印.\n        :type allowprint: bool\n        :return: 操作执行函数不做返回\n        ",
    "\n        获取post请求数据.\n\n        :keyword mod: 解析模式.(默认为lxml)\n        :type mod: str\n        :return: responses数据类.\n        ",
    "\n        获取get请求数据.\n\n        :keyword mod: 解析模式.(默认为lxml)\n        :type mod: str\n        :return: responses数据类.\n        ",
    "\n        获取会话请求数据.\n\n        :keyword newurl: 此时self.url为源地址,newurl为会话地址.\n        :type newurl: str\n        :keyword mod: 解析模式.(默认为lxml)\n        :type mod: str\n        :return: responses数据类.\n        ",
    "\n        快捷获取BeautifulSoup类数据.\n\n        :keyword mod: 解析模式.(默认为lxml)\n        :type mod: str\n        :return: BeautifulSoup类数据.\n        ",
    "\n        快速放回Xpath类的数据.\n\n        :keyword mod: 解析模式.(默认为HTML)\n        :type mod: str\n        :return: Xpath数据类型.\n        ",
    "\n        selenium的driver引擎.\n\n        :param exepath: 你的浏览器驱动器地址.(初次使用可能会自动下载,但地址需要自己寻找.)\n        :type exepath: str\n        :param webtype: 浏览器类型.\n        :type webtype: str\n        :param hearless: 是否开启无头模式.\n        :type hearless: bool\n        :return: driver引擎.\n        ",
    "\n    使用浏览器的无头模式对输入的文本进行翻译.\n\n    :param word: 文本.\n    :type word: str\n    :param driver: driver引擎.\n    :param webtype: 浏览器类型.\n    :type webtype: str\n    :param mutil: 是否需要获得更多翻译.\n    :type mutil: bool\n    :return: 翻译所得的列表或文本数据.\n    ",
    "\n    使用简单的百度api进行翻译，\n\n    :param word: 文本.\n    :type word: str\n    :keyword allowName: 是否允许结果中出现人名.\n    :type allowName: bool\n    :param banKWList: 是否允许结果中出现文本的关联时态.\n    :type banKWList: list\n    :return: 翻译后的数据.\n    ",
    "\n    从百度api获取翻译,但appid和appkey需要自行获取.\n\n    :param word: 文本.\n    :type word: str\n    :keyword appid: 软件id\n    :type appid: int\n    :keyword appkey: 软件密钥\n    :type appkey: str\n    :param from_lang: 文本的语言\n    :type from_lang: str\n    :param to_lang: 要翻译成的语言\n    :type to_lang: str\n    :return: 翻译后的数据.\n    ",
    "\n    用于将baseSql的错误输出转换为mysql格式的装饰器.\n\n    :param errorindex: 错误的状态码,由于无法获取,该值需要手动设定.\n    :type errorindex: str\n    :return: 装饰后的函数.\n    :retype: Callable\n    ",
    "\n    包装了pyMySql部分功能的类.\n\n    Attributes:\n        _user: 用户名.\n        _password: 用户密码.\n        _database: 数据库名\n        _host: 主机名.\n        _connect: 链接.\n        _cursor: 执行指针.\n        datatype: 部分数据类型.\n        tbName: 数据表名称.\n\n    Methods::\n        _show_feedback: 返回mysql中展示表的反馈.\n\n        _op_feedback: 返回mysql中操作命令的反馈.\n\n        _empty_feedback: mysql对于空表的反馈.\n\n        _alter_feedback: mysql中修改列的反馈.\n\n        _security_check: 某些操作将导致不可逆的后果,使用该函数进行警告,并且检查返回的布尔值以决定是否继续.\n\n        _checkParam: 当某些参数不能为空时使用该函数进行检测.\n\n        _to_show: 表格化单列输出.\n\n        _mutlishow: 表格化多列输出.\n\n        _checkDict: 对输入数据进行数据库的兼容性修改.\n\n        COLUMN: 获取数据表表头(要求在之前有查询表操作).\n\n        DATABASE: 获取和显示所有数据库.\n\n        TABLE: 获取和显示数据库的所有数据表.\n\n        getColumn: 获取表头,与方法COLUMN不同的是,COLUMN需要先查表,而该函数自动进行查表.\n\n        showTableFrame: 获取和显示数据表结构.\n\n        showTableContent: 获取和显示数据表内容.\n\n        selectColumn: 获取和展示选择数据表的某列.\n\n        createDB: 创建数据库.\n\n        dropDB: 删除数据库.\n\n        createTable: 创建数据表.\n\n        dropTable: 删除数据表.\n\n        insert: 向数据表添加数据.\n\n        updata: 修改数据表中数据.\n\n        delete: 删除数据表中当个或所有数据.\n\n        column_add: 为数据表添加一列.\n\n        column_drop: 删除数据表中的某一列.\n\n        column_modify: 修改数据表中某一列的定义.\n\n        column_default: 修改数据表中某一列的默认值.\n\n        column_dropDef: 删除数据表中某一列的默认值.\n\n        column_change: 使用change方式对某一列的定义进行修改.\n\n        tbName_modify: 修改数据表的名称.\n\n        executeOther: 执行其它命令(MySql移植).\n\n        to_csv: 将数据表导出为csv文件.\n\n        csv_to_mysql: 导入csv文件为数据表.\n\n        table_to_DataFrame: 将数据表导出为DataFrame.\n\n        checkId: 遍历数据表的id索引值,检测id是否连续以判断是缺漏数据.\n\n        randomChoice: 返回随机选择数据表中的数据\n    ",
    "\n        返回mysql中展示表的反馈(这其中并没有换行符,你需要根据实际的数据库反馈来在使用的字符串前后添加换行符).\n\n        :param listlen: 数据表的行数\n        :type listlen: int\n        :param spendtime: 运行耗时\n        :type spendtime: float\n        :return: 返回填充后的字符串.\n        :retype: str\n        ",
    "\n        在数据库只返回单个列的值的情况下,将返回的列表数据转换为可以被打印的表格的形式.\n\n        :param title: 该表的表头,例如`SHOW DATABASES;`输出的表头为'Database'.\n        :type title: str\n        :param conlist: 内容列表.\n        :type conlist: list\n        :param spendtime: 消耗的时间,这将显示在例如'Query OK, 0 row affected (spendtime sec)',可以使用time的time()函数在指针执行前后进行计时以获得.\n        :type spendtime: float\n        :return: 返回转换后的字符串.\n        :retype: str\n        ",
    "\n        在数据库只返回多个列的值的情况下,将返回的列表数据转换为可以被打印的表格的形式.\n\n        :param columlist: 展示的表头,你可以通过self.COLUM获取.\n        :type columlist: list\n        :param conlist: 内容列表.\n        :type conlist: list\n        :param spendtime: 运行耗时.\n        :type spendtime: float\n        :return: 返回什么.\n        :retype: str\n        ",
    "\n        返回mysql中操作命令的反馈(这其中并没有换行符,你需要根据实际的数据库反馈来在使用的字符串前后添加换行符).\n\n        :param spendtime: 运行耗时.\n        :type spendtime: float\n        :return: 填充后的字符串.\n        :retype: str\n        ",
    "\n        mysql对于空表的反馈.\n\n        :param spendtime: 运行耗时.\n        :type spendtime: float\n        :return: 填充后的字符串.\n        :retype: str\n        ",
    "\n        mysql中修改列的反馈.\n\n        :return: 填充后的字符串.\n        :retype: str\n        ",
    "\n        某些操作将导致不可逆的后果,使用该函数进行警告,并且检查返回的布尔值以决定是否继续.\n\n        :param checkparam: 传入该参数决定是否启用检测.\n        :type checkparam: bool\n        :param warnstr: 提示的字符串, 如为None或为空则默认为:'此操作将删除所有值.你确定要继续吗?(Y.是,N.否)'.\n        :type warnstr: str\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        当某些参数不能为空时使用该函数进行检测.\n\n        :param func: 执行的函数.\n        :type func: Callable\n        :param param: 进行检测的参数.\n        :type param: ...\n        :param warnstr: 警告的字符串.\n        :type warnstr: str\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        用以检测和转换容器中的内容使其兼容mysql语法.\n\n        :param aimContainer: 需要检测的参数.\n        :type aimContainer: 容器或单个元素.\n        :return: 返回什么.\n        :retype: ...\n        ",
    "\n        用于获取数据表的表头.(在获取之前应进行查询表操作.)\n\n        原返回的元组中包括:\n        1.列名：表示查询结果列的名称.\n        2.列类型代码: 表示查询结果列的数据类型代码.\n        常见的类型代码包括:\n            1: CHAR\n            2: NUMERIC\n            3: DECIMAL\n            4: INT\n            5: SMALLINT\n            7: FLOAT\n            8: DOUBLE\n            9: NULL\n            10: DATE\n            11: TIME\n            12: DATETIME\n            252: BLOB\n            253: VARCHAR\n            254: CHARACTER\n            等等\n        3.列长度: 表示查询结果列的最大长度.\n        4.列精度: 对于数值类型的列，表示精度(总位数).\n        5.列小数位数: 对于数值类型的列，表示小数位数.\n        6.列标志: 一个整数，表示列的一些特性。例如，是否为主键、是否可为空等.\n        7.是否可为空: 一个布尔值，表示查询结果列是否允许为空.\n\n        返回的列表中只包含列名.\n        ",
    "\n        返回并默认展示所有数据库.\n\n        获取Databases数据::\n\n            >>> sql = baseSQL(\"username\", \"password\")\n            >>> data = sql.DATABASE\n\n        仅查看数据::\n\n            >>> sql = baseSQL(\"username\", password)\n            >>> sql.DATABASE\n\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 包含所有数据库名称的列表.\n        :retype: list\n        ",
    "\n        展示数据库中的所有数据表.\n\n        获取Table数据::\n\n            >>> sql = baseSQL(\"username\", \"password\")\n            >>> data = sql.TABLE\n\n        仅查看数据::\n\n            >>> sql = baseSQL(\"username\", \"password\")\n            >>> sql.TABLE\n\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 包含所有数据表名称的列表.\n        :retype: list\n        ",
    "\n        获取表头,与方法COLUMN不同的是,COLUMN需要先查表,而该函数自动进行查表.\n\n        获取列名::\n\n            >>> print(sql.getColumn())  # ['id', 'username', ...]\n\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :return: 包含数据表的列名.\n        :retype: list[str]\n        ",
    "\n        获取和展示数据表的结构.\n\n        :param tbName: 数据表的名称,如果在__init__()中已经定义,则可为None或留空.\n        :type tbName: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :return: 包含数据结构的列表.\n        :retype: list\n        ",
    "\n        展示数据表的所有内容,等价于`SELECT * FROM TABLWNAME;`.\n\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :return: 包含所有内容的列表.\n        :retype: list\n        ",
    "\n        返回或展示数据表中的某些列的内容.\n\n        获取::\n\n            >>> sql.selectColumn(None, (\"label\", ), condition=\"where id > 0\")  # 获取label列下id大于0的列\n\n            >>> sql.selectColumn(None, (\"*\", ))  # 获取所有数据\n\n        :param tbName: 数据表名称.\n        :type tbName: ...\n        :param columns: 选择的列名.(PS.如需选择全部则为('*', ))\n        :type columns: tuple\n        :keyword condition: 符合mysql语法的条件,如:`WHERE COLUMN1 > 0`\n        :type condition: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 返回单个或多个列的内容列表.\n        :retype: list\n        ",
    "\n        创建数据库.\n\n        创建::\n\n            >>> sql.createDB(\"database\")\n\n        :param dbName: 数据库名称.\n        :type dbName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        删除数据库.\n\n        :param dbName: 数据库名称.\n        :type dbName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :keyword check: 是否进行安全检查.\n        :type check: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        创建数据表.\n\n        例子::\n\n            create table tablename (\n                id int auto_increment primary key,\n                username varchar(50) not null,\n                date date,\n                bool boolean default true,\n                或者primary key (id)\n            )\n\n        实现代码::\n\n        >>> sql.createTable(\"tablename\", True, username=(('v', 50), False), date=(('d', ), ), bool=(('b', ), True, \"true\"))\n\n        可用类型::\n\n            v: varchar\n            i: int\n            c: char\n            d: date\n            f: float\n            t: time\n            b: boolea\n\n        :param tableName: 数据表名称.\n        :type tableName: str\n        :param id_AUTO: 是否需要id主键,如果为True则默认使用自增id主键,如为str类型则将使用传入的字符串作为名称创建自增主键.(该参数仅为快捷方式,同样可以在primarykey,args中定义id主键.)\n        :type id_AUTO: str or bool\n        :param primarykey: 指定主键.(此主键应在参数args中被定义).\n        :type primarykey: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :keyword kwargs: 指定表中的列名和其定义,且参数应形如'列名=定义元组',其中元组应形如:\n            1.((类型, 长度[可选可空]), )\n            2.((类型, 长度[可选可空]), 是否可为空, 默认值, 自增,)\n            3.((类型, 长度[可选可空]), 是否可为空, 默认值, 自增, 其它约束)\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        删除表.\n\n        :param tbName: 表名.\n        :type tbName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :keyword check: 是否进行安全检查.\n        :type check: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        向数据表中添加数据.\n        (Null和None关键字需要在开头添加/,如/None,/null.)\n\n        插入数据::\n\n            >>> sql.insert(\"tableName\", label1=\"value1\", label2=\"value2\", other=\"/None\")\n\n        :param tbName: 数据表名.\n        :type tbName: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :keyword kwargs: 添加的数据,应形如'列名=对应数据'\n        :type kwargs: ...\n        :return: 返回什么.\n        :retype: 返回值的类型\n        ",
    "\n        修改表中的数据.\n        (Null和None关键字需要在开头添加/,如/None,/null.)\n\n        修改::\n\n            >>> sql.update(None, \"where id = 1\" other=\"info\")\n\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :param condition: 形如`WHERE COLUMN1 > 0`的约束条件.\n        :type condition: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :param check: 是否进行安全检查.\n        :type check: bool\n        :keyword kwargs: 修改的数据,应形如'列名=对应数据',(仅输入需要修改的列即可.)\n        :type kwargs: ...\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        删除表中的一行,多行或所有数据.\n\n        删除::\n\n            >>> sql.delete(None, condition=\"where id > 0\")\n\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :param condition: 形如`WHERE COLUMN1 > 0`的约束条件.\n        :type condition: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :param check: 是否进行安全检查.\n        :type check: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        向数据表中添加列.\n\n        添加列::\n\n            >>> sql.column_add(None, \"newLabel\", \"varchar(64)\", After=\"aimLabel\", notNull=False)\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 新列名.\n        :type columnName: str\n        :param dataType: 数据类型.\n        :type dataType: str\n        :keyword First: 插入到所有列之前.\n        :type First: bool\n        :keyword After: 插入到某一列之后,应输入目标的列名,且不可于First同时使用.\n        :type After: str\n        :keyword notNull: 是否可为空.\n        :type notNull: bool\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        删除数据表中的某一列.\n\n        删除::\n\n            >>> sql.column_drop(None, \"dropLabel\")\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 要删除的列名.\n        :type columnName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :keyword check: 是否进行安全检查.\n        :type check: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        对表的定义进行修改.\n\n        修改::\n\n            >>> sql.column_modify(None, \"label\", \"varchar(64)\", NoNULL=False)\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 列名.\n        :type columnName: str\n        :param dataType: 数据类型.\n        :type dataType: str\n        :param NoNULL: 是否可为空.\n        :type NoNULL: bool\n        :param default: 设置的默认值.\n        :type default: str\n        :param show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        设置或修改列默认值.\n\n        设置默认值::\n\n            >>> sql.column_default(None, \"label\", \"value\")\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 列名.\n        :type columnName: str\n        :param defValue: 设置的默认值.\n        :type defValue: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        删除列的默认值.\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 列名.\n        :type columnName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        修改数据表名.\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param newTbName: 新的表名.\n        :type newTbName: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        对表进行change修改.\n\n        :param tbName: 表名.\n        :type tbName: str\n        :param columnName: 列名.\n        :type columnName: str\n        :param newColumnName: 新的列名.\n        :type newColumnName: str\n        :param dataType: 数据类型.\n        :type dataType: str\n        :keyword show: 是否打印以展示.\n        :type show: bool\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        执行其它命令.\n\n        当关键字参数_input, allowprint, circulate同时启用时将会模拟mysql终端.\n        但是单独启用_input或circulate关键字参数都是没有意义的或会引发错误的.\n\n        :param command: 命令.\n        :type command: str\n        :keyword _input: 是否进行手动循环输入.\n        :type _input: bool\n        :keyword allowprint: 是否允许打印.\n        :type allowprint: bool\n        :keyword circulate: 是否循环.\n        :type circulate: bool\n        :return: 结果.\n        ",
    "\n        将数据库导出为csv文件.\n\n        :param csv_path: csv文件路径.\n        :type csv_path: str\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :keyword condition: 对取出的数据的mysql语法限定.\n        :type condition: str\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        将csv文件导入为数据表.\n\n        :param csv_path: csv文件路径.\n        :type csv_path: str\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :return: 操作执行函数不做返回.\n        :retype: None\n        ",
    "\n        将数据表转换为DataFrame.\n\n        :param tbName: 数据表名称.\n        :type tbName: str\n        :return: DataFrame形式的数据表.\n        :retype: DataFrame\n        ",
    "\n        遍历数据表的id索引值,检测id是否连续以判断是缺漏数据.\n\n        :param tbName: 需要检测的数据表名\n        :type tbName: str\n        :param firstNum: 首个索引的值\n        :type firstNum: int\n        :return: 操作执行函数不做返回\n        :rtype: None\n        ",
    "\n        随机选择数据表中的`limit`条数据\n\n        :param tbName: 数据表名\n        :type tbName: str\n        :param condition: 对取出数据的mysql语法限定.\n        :type condition: str\n        :param limit: 要求输出多少条随机数据\n        :type limit: int\n        :return: 有随机数据组成的列表\n        :rtype: list\n        ",
    "\n    用于清空文件夹\n\n    :param folder_path: 文件夹路径\n    :type folder_path: str\n    :return: 操作执行函数不做返回\n    :retype: None\n    ",
    "\n    打印树状目录\n    ",
    "\n    如果有多个文件相关联,那么在a的第一个数字中加入文件路径即可.\n    有静态文件及配置文件则将元组(源路径, 打包后在包中的路径)填入datas数组中即可.\n    如需关闭控制台在则设置console设置为False\n    注意:如果该文件或多文件中的主文件运行后不执行任何交换,则不会正确的打包.\n    pyinstaller --icon=path/to/icon.ico your_script.py\n    ",
    "\n    这是用来显示func_Define这个python文件里的所有函数和对应的简要提示的.\n\n    :param modeName: 模块名或.py文件名.\n    :type modeName: str\n    :keyword otherMagic: 是否运行结果中出现未显示定义的魔法变量,如: __str__, ...\n    :type otherMagic: bool\n    :return: 将包含函数和简要提示的Series.\n    :rtype: Series\n    ",
    "从.py文件中生成.pyi存根文件",
    "\n        对语句列表进行检查,排除不正确的提取.\n\n        @param sentencelist: 语句列表.\n        @type sentencelist: list\n        @return: 对每个类的魔术方法的记录字典,以及出现问题的以索引值为键,修正后的列表为值的字典.\n        @retype: tuple[dict, dict]\n        ",
    "将一个模块中的__doc__转换为文档",
    "\n    命令行运行器\n\n    使用方法::\n\n        >>> ins = instruct(output=True, ignore=False, color=True)\n        >>> ins(\"dir\")\n    ",
    "\n        命令行初始器\n\n        :keyword output: 是否运行输出结果.\n        :type output: bool\n        :keyword ignore: 是否将所有(原本将会抛出的)错误(Error)降级为警告(Warning)以保证程序不中断.\n        :type ignore: bool\n        :keyword color: 为布尔类型(bool)时决定输出是否带有ANSI色彩,为字符串(str)时决定输出什么颜色.\n        :type color: bool\n        :keyword eliminate: 是否排除某些会被误认为错误的无关紧要的警告,例如: '文件名、目录名或卷标语法不正确。'\n        ",
    "\n        执行器\n\n        :param instruction: 指令\n        :type instruction: str\n        :keyword cwd: 设定当前路径或执行路径\n        :type cwd: str\n        :keyword allowOUTPUT: 是否允许打印结果\n        :type allowOUTPUT: bool\n        :return: cmd执行结果\n        :rtype: str\n        ",
    "\n        执行器内核\n\n        :param instruction: 指令\n        :type instruction: str\n        :param cwd: 执行环境路径\n        :type cwd: PathLike | str\n        :param encoding: 编码.(防止命令行输出乱码)\n        :type encoding: str\n        :return: 一个字典,键'C'对应正确信息,键'E'对应错误消息\n        :rtype: dict\n        ",
    "\n        与open相同,但是使用write模式打开时不会覆盖源文件,而是以read模式打开\n\n        >>> with jsonOpen(file, \"r\") as file:\n        >>>     file.read()  # type: dict\n\n        :param file:\n        :type file:\n        :param mode:\n        :type mode:\n        "
]